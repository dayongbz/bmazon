{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getExchangeRate),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchExchange),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(exchangeSaga);\n\nimport { all, fork, takeEvery, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { EXCHANGE_RATE_REQUEST, EXCHANGE_RATE_SUCCESS, EXCHANGE_RATE_FAILURE } from '../reducers/exchange';\n\nfunction getExchangeRateAPI() {\n  return axios.get('/static/finace.json');\n}\n\nfunction getExchangeRate() {\n  var result;\n  return _regeneratorRuntime.wrap(function getExchangeRate$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getExchangeRateAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: EXCHANGE_RATE_SUCCESS,\n            data: {\n              rate: result.data[0].cashBuyingPrice,\n              date: result.data[0].date,\n              time: result.data[0].time,\n              provider: result.data[0].provider\n            }\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: EXCHANGE_RATE_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchExchange() {\n  return _regeneratorRuntime.wrap(function watchExchange$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(EXCHANGE_RATE_REQUEST, getExchangeRate);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function exchangeSaga() {\n  return _regeneratorRuntime.wrap(function exchangeSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchExchange)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/dayong/Desktop/dev/bmazon/sagas/exchange.js"],"names":["getExchangeRate","watchExchange","exchangeSaga","all","fork","takeEvery","call","put","axios","EXCHANGE_RATE_REQUEST","EXCHANGE_RATE_SUCCESS","EXCHANGE_RATE_FAILURE","getExchangeRateAPI","get","result","type","data","rate","cashBuyingPrice","date","time","provider","console","error"],"mappings":";;;;yBAaUA,e;;;yBAoBAC,a;;;yBAIeC,Y;;AArCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,qBADF,EAEEC,qBAFF,EAGEC,qBAHF,QAIO,sBAJP;;AAMA,SAASC,kBAAT,GAA8B;AAC5B,SAAOJ,KAAK,CAACK,GAAN,CAAU,qBAAV,CAAP;AACD;;AAED,SAAUb,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMM,IAAI,CAACM,kBAAD,CAAV;;AAFnB;AAEUE,UAAAA,MAFV;AAAA;AAGI,iBAAMP,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEL,qBADE;AAERM,YAAAA,IAAI,EAAE;AACJC,cAAAA,IAAI,EAAEH,MAAM,CAACE,IAAP,CAAY,CAAZ,EAAeE,eADjB;AAEJC,cAAAA,IAAI,EAAEL,MAAM,CAACE,IAAP,CAAY,CAAZ,EAAeG,IAFjB;AAGJC,cAAAA,IAAI,EAAEN,MAAM,CAACE,IAAP,CAAY,CAAZ,EAAeI,IAHjB;AAIJC,cAAAA,QAAQ,EAAEP,MAAM,CAACE,IAAP,CAAY,CAAZ,EAAeK;AAJrB;AAFE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaIC,UAAAA,OAAO,CAACC,KAAR;AAbJ;AAcI,iBAAMhB,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEJ;AADE,WAAD,CAAT;;AAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUV,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,SAAS,CAACI,qBAAD,EAAwBT,eAAxB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,aAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeEvery, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  EXCHANGE_RATE_REQUEST,\n  EXCHANGE_RATE_SUCCESS,\n  EXCHANGE_RATE_FAILURE,\n} from '../reducers/exchange';\n\nfunction getExchangeRateAPI() {\n  return axios.get('/static/finace.json');\n}\n\nfunction* getExchangeRate() {\n  try {\n    const result = yield call(getExchangeRateAPI);\n    yield put({\n      type: EXCHANGE_RATE_SUCCESS,\n      data: {\n        rate: result.data[0].cashBuyingPrice,\n        date: result.data[0].date,\n        time: result.data[0].time,\n        provider: result.data[0].provider,\n      },\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: EXCHANGE_RATE_FAILURE,\n    });\n  }\n}\n\nfunction* watchExchange() {\n  yield takeEvery(EXCHANGE_RATE_REQUEST, getExchangeRate);\n}\n\nexport default function* exchangeSaga() {\n  yield all([fork(watchExchange)]);\n}\n"]},"metadata":{},"sourceType":"module"}