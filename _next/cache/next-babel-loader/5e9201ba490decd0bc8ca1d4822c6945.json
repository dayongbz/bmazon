{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/router';\n\nconst OptionSliderItem = ({\n  options,\n  selected,\n  sliderIndex,\n  optionIndex,\n  optionSelect,\n  setOptionSelect\n}) => {\n  const router = useRouter();\n  const liRef = useRef();\n  useEffect(() => {\n    if (liRef.current) {\n      if (selected) {\n        liRef.current.classList.add('selected');\n      } else {\n        liRef.current.classList.remove('selected');\n      }\n\n      if (optionSelect.length === 1) {\n        if (!options.option.some(item => item.list[sliderIndex] == optionIndex)) {\n          liRef.current.classList.add('none');\n        } else {\n          liRef.current.classList.remove('none');\n        }\n      } else {\n        if (sliderIndex + 1 === optionSelect.length) {\n          if (!options.option.filter(item => item.list[0] === optionSelect[0]).some(item => item.list[sliderIndex] == optionIndex)) {\n            liRef.current.classList.add('none');\n          } else {\n            liRef.current.classList.remove('none');\n          }\n        } else {\n          if (!options.option.filter(item => item.list[sliderIndex + 1] === optionSelect[sliderIndex + 1]).some(item => item.list[sliderIndex] == optionIndex)) {\n            liRef.current.classList.add('none');\n          } else {\n            liRef.current.classList.remove('none');\n          }\n        }\n      }\n    }\n  }, [optionSelect, options]);\n  const onClickOption = useCallback(() => {\n    const selectedOption = optionSelect.map((item, index) => {\n      if (index === sliderIndex) {\n        return optionIndex + '';\n      } else {\n        return item;\n      }\n    });\n\n    if (liRef.current) {\n      if (liRef.current.classList.contains('none')) {\n        // 가능한 옵션 찾기\n        const availableOption = options.option.filter(item => item.list[sliderIndex] == optionIndex).sort((x, y) => x.list.reduce((x, y) => x + y) - y.list.reduce((x, y) => x + y))[0];\n        setOptionSelect([...availableOption.list]);\n      } else {\n        if (sliderIndex + 1 === options.listName.length) {\n          setOptionSelect([...selectedOption]);\n          const optionAsin = options.option.filter(item => item.list.every((item, sliderIndex) => item === selectedOption[sliderIndex]))[0].asin;\n          router.push(`/product/${optionAsin}`);\n        } else {\n          setOptionSelect([...selectedOption]);\n        }\n      }\n    }\n  }, [optionSelect]);\n  return __jsx(\"li\", {\n    ref: liRef,\n    onClick: onClickOption\n  }, __jsx(\"p\", {\n    className: \"optionName\"\n  }, options.listValue[options.listName[sliderIndex]][optionIndex]));\n};\n\nexport default OptionSliderItem;","map":null,"metadata":{},"sourceType":"module"}