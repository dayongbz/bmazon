{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getExchangeRate),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchExchange),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(exchangeSaga);\n\nimport { all, fork, takeEvery, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { EXCHANGE_RATE_REQUEST, EXCHANGE_RATE_SUCCESS, EXCHANGE_RATE_FAILURE } from '../reducers/exchange';\n\nfunction getExchangeRateAPI() {\n  return axios.get('/static/finace.json');\n}\n\nfunction getExchangeRate() {\n  var result;\n  return _regeneratorRuntime.wrap(function getExchangeRate$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getExchangeRateAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: EXCHANGE_RATE_SUCCESS,\n            data: {\n              rate: result.data[0].cashBuyingPrice,\n              date: result.data[0].date,\n              time: result.data[0].time,\n              provider: result.data[0].provider\n            }\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: EXCHANGE_RATE_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchExchange() {\n  return _regeneratorRuntime.wrap(function watchExchange$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(EXCHANGE_RATE_REQUEST, getExchangeRate);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function exchangeSaga() {\n  return _regeneratorRuntime.wrap(function exchangeSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchExchange)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":null,"metadata":{},"sourceType":"module"}