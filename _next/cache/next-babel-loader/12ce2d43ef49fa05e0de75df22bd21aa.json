{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/router';\n\nvar OptionSliderItem = function OptionSliderItem(_ref) {\n  var options = _ref.options,\n      selected = _ref.selected,\n      sliderIndex = _ref.sliderIndex,\n      optionIndex = _ref.optionIndex,\n      optionSelect = _ref.optionSelect,\n      setOptionSelect = _ref.setOptionSelect;\n  var router = useRouter();\n  var liRef = useRef();\n  useEffect(function () {\n    if (liRef.current) {\n      if (selected) {\n        liRef.current.classList.add('selected');\n      } else {\n        liRef.current.classList.remove('selected');\n      }\n\n      if (optionSelect.length === 1) {\n        if (!options.option.some(function (item) {\n          return item.list[sliderIndex] == optionIndex;\n        })) {\n          liRef.current.classList.add('none');\n        } else {\n          liRef.current.classList.remove('none');\n        }\n      } else {\n        if (sliderIndex + 1 === optionSelect.length) {\n          if (!options.option.filter(function (item) {\n            return item.list[0] === optionSelect[0];\n          }).some(function (item) {\n            return item.list[sliderIndex] == optionIndex;\n          })) {\n            liRef.current.classList.add('none');\n          } else {\n            liRef.current.classList.remove('none');\n          }\n        } else {\n          if (!options.option.filter(function (item) {\n            return item.list[sliderIndex + 1] === optionSelect[sliderIndex + 1];\n          }).some(function (item) {\n            return item.list[sliderIndex] == optionIndex;\n          })) {\n            liRef.current.classList.add('none');\n          } else {\n            liRef.current.classList.remove('none');\n          }\n        }\n      }\n    }\n  }, [optionSelect, options]);\n  var onClickOption = useCallback(function () {\n    var selectedOption = optionSelect.map(function (item, index) {\n      if (index === sliderIndex) {\n        return optionIndex + '';\n      } else {\n        return item;\n      }\n    });\n\n    if (liRef.current) {\n      if (liRef.current.classList.contains('none')) {\n        // 가능한 옵션 찾기\n        var availableOption = options.option.filter(function (item) {\n          return item.list[sliderIndex] == optionIndex;\n        }).sort(function (x, y) {\n          return x.list.reduce(function (x, y) {\n            return x + y;\n          }) - y.list.reduce(function (x, y) {\n            return x + y;\n          });\n        })[0];\n        setOptionSelect(_toConsumableArray(availableOption.list));\n      } else {\n        if (sliderIndex + 1 === options.listName.length) {\n          setOptionSelect(_toConsumableArray(selectedOption));\n          var optionAsin = options.option.filter(function (item) {\n            return item.list.every(function (item, sliderIndex) {\n              return item === selectedOption[sliderIndex];\n            });\n          })[0].asin;\n          router.push(\"/product/\".concat(optionAsin));\n        } else {\n          setOptionSelect(_toConsumableArray(selectedOption));\n        }\n      }\n    }\n  }, [optionSelect]);\n  return __jsx(\"li\", {\n    ref: liRef,\n    onClick: onClickOption\n  }, __jsx(\"p\", {\n    className: \"optionName\"\n  }, options.listValue[options.listName[sliderIndex]][optionIndex]));\n};\n\nexport default OptionSliderItem;","map":null,"metadata":{},"sourceType":"module"}